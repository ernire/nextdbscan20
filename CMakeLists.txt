cmake_minimum_required(VERSION 3.14)
project(nextdbscan20 LANGUAGES CXX)

set(DEBUG ON)
set(GTEST OFF)
set(OMP ON)
set(MPI OFF)
set(CUDA OFF)

set(NDB_FILES main.cpp nextdbscan.cpp nc_tree.cpp magma_util.cpp)

if (OMP)
    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_FLAGS "-Wall -Wextra -O3 -fno-exceptions")
    add_definitions(-DOMP_ON)
    find_package(OpenMP REQUIRED)
#    add_executable(nextdbscan20 main.cpp nextdbscan.cpp nc_tree.cpp magma_util.cpp)
    add_executable(nextdbscan20 ${NDB_FILES})
    target_link_libraries(nextdbscan20 PUBLIC OpenMP::OpenMP_CXX)
elseif(CUDA)
    add_definitions(-DCUDA_ON)
else()
    set(CMAKE_CXX_STANDARD 20)
    set(CMAKE_CXX_FLAGS "-Wall -Wextra -O3 -fno-exceptions")
#    set(GCC_COVERAGE_COMPILE_FLAGS "-std=c++20 -Wall -Wextra -O3 -fopenmp -fno-exceptions")
#    set(GCC_COVERAGE_COMPILE_FLAGS "-Wall -Wextra -O3 -fno-exceptions")
    add_executable(nextdbscan20 ${NDB_FILES})
#    add_executable(nextdbscan20 main.cpp nextdbscan.cpp nc_tree.cpp magma_util.cpp)
endif()

if (MPI)
    add_definitions(-DMPI_ON)
    find_package(MPI REQUIRED)
    include_directories(${MPI_INCLUDE_PATH})
    SET(CMAKE_CXX_COMPILER "${MPI_CXX_COMPILER}")
    set(CMAKE_CXX_FLAGS "-Wall -O3")
    add_executable(nextdbscan20-mpi ${NDB_FILES})
    if(MPI_COMPILE_FLAGS)
        set_target_properties(nextdbscan20-mpi PROPERTIES
                COMPILE_FLAGS "${MPI_COMPILE_FLAGS}")
    endif()
    if(MPI_LINK_FLAGS)
        set_target_properties(nextdbscan20-mpi PROPERTIES
                LINK_FLAGS "${MPI_LINK_FLAGS}")
    endif()
    target_link_libraries(nextdbscan20-mpi ${MPI_LIBRARIES})
endif()
if (DEBUG)
    add_definitions(-DDEBUG_ON)
endif()
